<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="944657a4-4f5d-4097-8ff8-e2600319accb" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<flow name="dataweave_basics" doc:id="22e4649c-de2f-4a7a-b767-4a485bed5de2" >
		<ee:transform doc:name="Con" doc:id="e919ccb5-9d09-47b3-8e86-8d34ed298455" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{ 
  "newString":("hello"++"world")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform json to xml" doc:id="ba0572c8-6478-47d5-86f1-da4d9c7563e9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
   "newString":("hello"++"world")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Create a variable in DW" doc:id="4c75c971-f325-4057-b4e0-82dabcea14d9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myvar= {
	 "newString":("hello "++" world")
} 
output application/java
---
 myvar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Use Dataweave  native function" doc:id="91906e6c-a5c1-4651-943c-5d5bd0cf677b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myvar = {
	"sum": sum([3,4,5,3,5,5,12]),
	"avg": avg([100,120,200,30,40]),
	"even": isEven(4),
	"uppercase":upper("Mulesoft")
}
output application/json
---
myvar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_object_array" doc:id="565d6813-83b4-4696-8ece-175afb87d2f2" >
		<ee:transform doc:name="mapping elements from an array into an object" doc:id="1450ea8a-9178-4539-a228-b269ac8b0cf2" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customarray =[
	"Mulesoft",
	"Course",
	"fundamentas"
]

output application/json
---
customarray map((item, index)->
	index :item  ++ "_"  ++ index
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="pluck objects from an object into array" doc:id="e5f88391-6427-4c66-870d-4c2922c02c9d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0


var custObj ={
	
	"0":   "Mulesoft",
	"1":  "Salesforce",
	"2":  "Integration"
}
output application/json
---
custObj pluck((value) ->
	value
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Filter an array and only matching item" doc:id="299c717e-aaab-47da-a84b-b991d6016c0e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customarray = [1,2,3,4,5,6,7,8,9]
output application/json
---
{
	"collection" : customarray filter((item,index) ->
	 item >3
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="filter an object an return only matching item" doc:id="f5e0cc8a-4e2f-4a1a-a46a-194b5b313947" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj ={
	
	"0":   "Mulesoft",
	"1":  "Salesforce",
	"2":  "Integration"
}
output application/json 
---
{
	"collection": customObj filterObject((value ,key) ->
		sizeOf(value) >1
	) 
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_files" doc:id="e7b77ee3-7323-4235-b2c9-5064a92f531e" >
		<ee:transform doc:name="read content file from classpath" doc:id="2da944f3-d27a-4be0-beeb-625a7b33d59a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
readUrl("classpath://peoplename.json", "application/json")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="create a metadata type and use it as a payload" doc:id="1b7dcad6-6438-4b0a-ae99-0b00a8897ea5" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveselectorsOverObject" doc:id="7dd9c699-9b63-4a98-b4ce-aa9973e1d3f1" >
		<ee:transform doc:name="Single Value selctor over object" doc:id="d1985048-e974-4455-a7e7-92ea20da5391" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj ={   
    "people":{
	  "person":{
	  "name":"John"
	  },
	  "person":{
	  "name":"Mary"
	  },
	  "person":{
	  "name":"Ann"
	  },
	  "person":{
	  "name":"Dora"
	  }	  

}
}
output application/json
---

    customObj.people]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Multiple Value Selector over Objects" doc:id="951b22fb-38dc-4720-8f11-f5ff986aa17d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customObj ={   
    "people":{
	  "person":{
	  "name":"John"
	  },
	  "person":{
	  "name":"Mary"
	  },
	  "person":{
	  "name":"Ann"
	  },
	  "person":{
	  "name":"Dora"
	  }	  

}
}
output application/json
---
/* .* returns an array with all the items
 * 
 */
 
     customObj.people.*person]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Descendant value selector over an object" doc:id="3a40c39a-e522-4e55-bf37-42e0c0a01b9f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj ={   
    "people":{
	  "person":{
	  "name":"John"
	  },
	  "person":{
	  "name":"Mary"
	  },
	  "person":{
	  "name":"Ann"
	  },
	  "person":{
	  "name":"Dora"
	  }	  

}
}
output application/json
---

     customObj.people..person
  ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Key value pair of selection over an object" doc:id="bd968cc8-be7c-4f59-9f7b-51d4d9646fab" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customObj ={   
    "people":{
	  "person":{
	  "name":"John"
	  },
	  "person":{
	  "name":"Mary"
	  },
	  "person":{
	  "name":"Ann"
	  },
	  "person":{
	  "name":"Dora"
	  }	  

}
}
output application/json
---

     customObj.people.*person.&name
  ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Index selector" doc:id="251ad5d7-ac8d-4bcc-8a1d-c6608130978c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customObj ={   
    "people":{
	  "person":{
	  "name":"John"
	  },
	  "person":{
	  "name":"Mary"
	  },
	  "person":{
	  "name":"Ann"
	  },
	  "person":{
	  "name":"Dora"
	  }	  

}
}
output application/json
---

     customObj.people[2]
  ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweaveselectoroverstring" doc:id="c915d022-9fdd-44cb-90db-dd2273c47945" >
		<ee:transform doc:name="Index selector over a string" doc:id="d8e90a0d-4d8e-46af-890d-eedb674e05b0" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customstring = "Mulesoft"
output application/json
---

customstring[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="f2404d4b-1783-4e63-acb1-ebcd95d1e25b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customstring = "Mulesoft"
output application/json
---

customstring[0 to 3]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_lambda_basics" doc:id="e14ba2e8-5335-4c2b-8b1f-9ce707227b01" >
		<http:listener doc:name="HTTP POST" doc:id="46be7ded-b015-4a05-abc5-85ca215f3187" config-ref="HTTP_Listener_config" path="/lambdas" allowedMethods="POST"/>
		<ee:transform doc:name="Declare and Invoke a Function" doc:id="649a779f-9a1a-428d-9b33-50072370598b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
fun createString(obj) = {
	description : obj
}
output application/json
---
{
	"root" : createString(payload)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="098db3ee-ce6a-4bbb-ac0a-1b7bddca6ee8" message="#[payload]"/>
		<ee:transform doc:name="Use named parameters in Lambda" doc:id="221834ac-9751-483f-b541-ef943fd39442" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customarray = [1,2,3,4,5,6,7,8]
output application/json
---
{
	"collection": customarray map((number) ->
		(number*100)
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="a1a0dc0f-4339-47a4-bf58-e22723e217a3" message="#[payload]"/>
		<ee:transform doc:name="Transform Message" doc:id="03da6963-6cdd-4e99-b2cd-7d3f824089a3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customarray = ["Mulesoft" ,"Course","Fundamentals"]
output application/json
---
{
	"collection":customarray map (
		"$$" : $
)

}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="Dataweave_lambdas_intermediate" doc:id="a807b5fc-2f71-4f8b-855c-a737ddd192db" >
		<ee:transform doc:name="Map and merges fields from items in different arrays" doc:id="ce09f939-464d-4275-a1eb-1c7dc48771fc" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var books = [
	{
		bookId : 101,
		title  :"mulesoft fundamentals",
		"price":"10.00"
	},
	{
		bookId : 102,
		title  :"mulesoft fundamentals courses",
		"price":"15.00"
	},
]

var authors = [
	{
		bookId: 101,
		author: "nelson mandela",
	},
	{
		bookId: 102,
		author: "cristiano ronaldo",
	}
]


output application/json
---
{
	"bookResult" : books map((item,index)->
		using(id = item.bookId) {
			"id":id,
			"topic":item.title,
			"cost":item.price,
			(authors filter($.*bookId contains id) map(item)->
				{
					// $.*bookId refers to author array
					"author" : item.author
				}
			)
		}
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Returns only the values of matching keys within an object" doc:id="455faf4c-3749-4786-9f33-5df42e0b5288" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var bookslist = [
	book:{
		bookId : 101,
		title  :"mulesoft fundamentals",
		"price":"10.00"
	},
	book:{
		bookId : 102,
		title  :"mulesoft fundamentals courses",
		"price":"28.00"
	},
]

var authors = [
	{
		bookId: 101,
		author: "nelson mandela",
	},
	{
		bookId: 102,
		author: "cristiano ronaldo",
	}
]
output application/json
---
{
	//lets get all the prices >15
	"prices":  bookslist.book.*price[?($>15)]
	
}
// ? -> validates if key "price" exists
// and if exists check if price match a specific price matches a condition]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
